ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PWM_swt_mode_select.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWM_swt_mode_select_Enable,"ax",%progbits
  20              		.align	2
  21              		.global	PWM_swt_mode_select_Enable
  22              		.thumb
  23              		.thumb_func
  24              		.type	PWM_swt_mode_select_Enable, %function
  25              	PWM_swt_mode_select_Enable:
  26              	.LFB2:
  27              		.file 1 "Generated_Source\\PSoC5\\PWM_swt_mode_select.c"
   1:Generated_Source\PSoC5/PWM_swt_mode_select.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * File Name: PWM_swt_mode_select.c
   3:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
   5:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Description:
   6:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  15:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Note:
  16:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  17:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM_swt_mode_select.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
  24:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #include "PWM_swt_mode_select.h"
  25:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
  26:Generated_Source\PSoC5/PWM_swt_mode_select.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #ifdef PWM_swt_mode_select_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM_swt_mode_select.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #endif /* PWM_swt_mode_select_PWMUDB_genblk1_ctrlreg__REMOVED */
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 2


  31:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
  32:Generated_Source\PSoC5/PWM_swt_mode_select.c **** uint8 PWM_swt_mode_select_initVar = 0u;
  33:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
  34:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
  35:Generated_Source\PSoC5/PWM_swt_mode_select.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Function Name: PWM_swt_mode_select_Start
  37:Generated_Source\PSoC5/PWM_swt_mode_select.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  39:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Summary:
  40:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  44:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  None
  46:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  47:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Return:
  48:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  None
  49:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  50:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  PWM_swt_mode_select_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  54:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM_swt_mode_select.c **** void PWM_swt_mode_select_Start(void) 
  56:Generated_Source\PSoC5/PWM_swt_mode_select.c **** {
  57:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     if(PWM_swt_mode_select_initVar == 0u)
  59:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
  60:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_Init();
  61:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_initVar = 1u;
  62:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
  63:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     PWM_swt_mode_select_Enable();
  64:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
  65:Generated_Source\PSoC5/PWM_swt_mode_select.c **** }
  66:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
  67:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
  68:Generated_Source\PSoC5/PWM_swt_mode_select.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Function Name: PWM_swt_mode_select_Init
  70:Generated_Source\PSoC5/PWM_swt_mode_select.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  72:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Summary:
  73:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  PWM_swt_mode_select_Start().
  76:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  77:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  None
  79:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  80:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Return:
  81:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  None
  82:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
  83:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM_swt_mode_select.c **** void PWM_swt_mode_select_Init(void) 
  85:Generated_Source\PSoC5/PWM_swt_mode_select.c **** {
  86:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_UsingFixedFunction || PWM_swt_mode_select_UseControl)
  87:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         uint8 ctrl;
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 3


  88:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (PWM_swt_mode_select_UsingFixedFunction || PWM_swt_mode_select_UseControl) */
  89:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
  90:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if(!PWM_swt_mode_select_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if(PWM_swt_mode_select_UseStatus)
  92:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             uint8 PWM_swt_mode_select_interruptState;
  94:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_UseStatus) */
  95:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (!PWM_swt_mode_select_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
  97:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_CONTROL |= PWM_swt_mode_select_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if (PWM_swt_mode_select_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_CONTROL |= PWM_swt_mode_select_CFG0_DB;
 102:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 104:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         ctrl = PWM_swt_mode_select_CONTROL3 & ((uint8 )(~PWM_swt_mode_select_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_CONTROL3 = ctrl | PWM_swt_mode_select_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 107:Generated_Source\PSoC5/PWM_swt_mode_select.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_RT1 &= ((uint8)(~PWM_swt_mode_select_RT1_MASK));
 109:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_RT1 |= PWM_swt_mode_select_SYNC;
 110:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 111:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_RT1 &= ((uint8)(~PWM_swt_mode_select_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_RT1 |= PWM_swt_mode_select_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 115:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #elif (PWM_swt_mode_select_UseControl)
 116:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         ctrl = PWM_swt_mode_select_CONTROL & ((uint8)(~PWM_swt_mode_select_CTRL_CMPMODE2_MASK)) &
 118:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 ((uint8)(~PWM_swt_mode_select_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_CONTROL = ctrl | PWM_swt_mode_select_DEFAULT_COMPARE2_MODE |
 120:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                    PWM_swt_mode_select_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 123:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (!PWM_swt_mode_select_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if (PWM_swt_mode_select_Resolution == 8)
 125:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_AUX_CONTROLDP0 |= (PWM_swt_mode_select_AUX_CTRL_FIFO0_CLR);
 127:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #else /* (PWM_swt_mode_select_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_AUX_CONTROLDP0 |= (PWM_swt_mode_select_AUX_CTRL_FIFO0_CLR);
 130:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_AUX_CONTROLDP1 |= (PWM_swt_mode_select_AUX_CTRL_FIFO0_CLR);
 131:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 133:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_WriteCounter(PWM_swt_mode_select_INIT_PERIOD_VALUE);
 134:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (!PWM_swt_mode_select_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 136:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     PWM_swt_mode_select_WritePeriod(PWM_swt_mode_select_INIT_PERIOD_VALUE);
 137:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 138:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if (PWM_swt_mode_select_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_WriteCompare(PWM_swt_mode_select_INIT_COMPARE_VALUE1);
 140:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #else
 141:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_WriteCompare1(PWM_swt_mode_select_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_WriteCompare2(PWM_swt_mode_select_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 4


 145:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if (PWM_swt_mode_select_KillModeMinTime)
 146:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_WriteKillTime(PWM_swt_mode_select_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 149:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if (PWM_swt_mode_select_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_WriteDeadTime(PWM_swt_mode_select_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 153:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_UseStatus || PWM_swt_mode_select_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_SetInterruptMode(PWM_swt_mode_select_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (PWM_swt_mode_select_UseStatus || PWM_swt_mode_select_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 157:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_GLOBAL_ENABLE |= PWM_swt_mode_select_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_CONTROL2 |= PWM_swt_mode_select_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #else
 163:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if(PWM_swt_mode_select_UseStatus)
 164:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 165:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_STATUS_AUX_CTRL |= PWM_swt_mode_select_STATUS_ACTL_INT_EN_MASK;
 170:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 171:Generated_Source\PSoC5/PWM_swt_mode_select.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             CyExitCriticalSection(PWM_swt_mode_select_interruptState);
 173:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 174:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* Clear the FIFO to enable the PWM_swt_mode_select_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_ClearFIFO();
 177:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_UseStatus) */
 178:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM_swt_mode_select.c **** }
 180:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 181:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 182:Generated_Source\PSoC5/PWM_swt_mode_select.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Function Name: PWM_swt_mode_select_Enable
 184:Generated_Source\PSoC5/PWM_swt_mode_select.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 186:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Summary:
 187:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 189:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  None
 191:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 192:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Return:
 193:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  None
 194:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 195:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 198:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM_swt_mode_select.c **** void PWM_swt_mode_select_Enable(void) 
 200:Generated_Source\PSoC5/PWM_swt_mode_select.c **** {
  28              		.loc 1 200 0
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 5


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE2:
  36              		.size	PWM_swt_mode_select_Enable, .-PWM_swt_mode_select_Enable
  37 0002 00BF     		.section	.text.PWM_swt_mode_select_Stop,"ax",%progbits
  38              		.align	2
  39              		.global	PWM_swt_mode_select_Stop
  40              		.thumb
  41              		.thumb_func
  42              		.type	PWM_swt_mode_select_Stop, %function
  43              	PWM_swt_mode_select_Stop:
  44              	.LFB3:
 201:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_GLOBAL_ENABLE |= PWM_swt_mode_select_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_GLOBAL_STBY_ENABLE |= PWM_swt_mode_select_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 207:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_UseControl || PWM_swt_mode_select_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_CONTROL |= PWM_swt_mode_select_CTRL_ENABLE;
 210:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (PWM_swt_mode_select_UseControl || PWM_swt_mode_select_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM_swt_mode_select.c **** }
 212:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 213:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 214:Generated_Source\PSoC5/PWM_swt_mode_select.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Function Name: PWM_swt_mode_select_Stop
 216:Generated_Source\PSoC5/PWM_swt_mode_select.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 218:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Summary:
 219:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 222:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  None
 224:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 225:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Return:
 226:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  None
 227:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 228:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 232:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/PWM_swt_mode_select.c **** void PWM_swt_mode_select_Stop(void) 
 234:Generated_Source\PSoC5/PWM_swt_mode_select.c **** {
  45              		.loc 1 234 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50 0000 7047     		bx	lr
  51              		.cfi_endproc
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 6


  52              	.LFE3:
  53              		.size	PWM_swt_mode_select_Stop, .-PWM_swt_mode_select_Stop
  54 0002 00BF     		.section	.text.PWM_swt_mode_select_WriteCounter,"ax",%progbits
  55              		.align	2
  56              		.global	PWM_swt_mode_select_WriteCounter
  57              		.thumb
  58              		.thumb_func
  59              		.type	PWM_swt_mode_select_WriteCounter, %function
  60              	PWM_swt_mode_select_WriteCounter:
  61              	.LFB4:
 235:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_UseControl || PWM_swt_mode_select_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_CONTROL &= ((uint8)(~PWM_swt_mode_select_CTRL_ENABLE));
 237:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (PWM_swt_mode_select_UseControl || PWM_swt_mode_select_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 239:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_GLOBAL_ENABLE &= ((uint8)(~PWM_swt_mode_select_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_swt_mode_select_BLOCK_STBY_EN_MASK)
 243:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM_swt_mode_select.c **** }
 245:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 246:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #if (PWM_swt_mode_select_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 249:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 250:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Function Name: PWM_swt_mode_select_SetCompareMode
 252:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 254:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 258:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 262:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Return:
 263:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *  None
 264:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 265:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         void PWM_swt_mode_select_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         {
 268:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #if(PWM_swt_mode_select_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 270:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 #if(0 != PWM_swt_mode_select_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_swt_mode_select_CT
 272:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 #else
 273:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 #endif /* (0 != PWM_swt_mode_select_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 276:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 PWM_swt_mode_select_CONTROL3 &= ((uint8)(~PWM_swt_mode_select_CTRL_CMPMODE1_MASK));
 277:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 PWM_swt_mode_select_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 279:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #elif (PWM_swt_mode_select_UseControl)
 280:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 281:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 #if(0 != PWM_swt_mode_select_CTRL_CMPMODE1_SHIFT)
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 7


 282:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_swt_mode_select_C
 283:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                                 PWM_swt_mode_select_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 #else
 285:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                     uint8 comparemode1masked = comparemode & PWM_swt_mode_select_CTRL_CMPMODE1_MASK
 286:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 #endif /* (0 != PWM_swt_mode_select_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 288:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 #if(0 != PWM_swt_mode_select_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_swt_mode_select_C
 290:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                                PWM_swt_mode_select_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 #else
 292:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                     uint8 comparemode2masked = comparemode & PWM_swt_mode_select_CTRL_CMPMODE2_MASK
 293:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 #endif /* (0 != PWM_swt_mode_select_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 295:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 PWM_swt_mode_select_CONTROL &= ((uint8)(~(PWM_swt_mode_select_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                             PWM_swt_mode_select_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 PWM_swt_mode_select_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 300:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #else
 301:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         }
 304:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* PWM_swt_mode_select_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 306:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 308:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 310:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 311:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Function Name: PWM_swt_mode_select_SetCompareMode1
 313:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 315:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 318:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 322:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Return:
 323:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *  None
 324:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 325:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         void PWM_swt_mode_select_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         {
 328:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #if(0 != PWM_swt_mode_select_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_swt_mode_select_CTRL_C
 330:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                            PWM_swt_mode_select_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #else
 332:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 uint8 comparemodemasked = comparemode & PWM_swt_mode_select_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #endif /* (0 != PWM_swt_mode_select_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 335:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #if (PWM_swt_mode_select_UseControl)
 336:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 PWM_swt_mode_select_CONTROL &= ((uint8)(~PWM_swt_mode_select_CTRL_CMPMODE1_MASK)); 
 337:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 PWM_swt_mode_select_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #endif /* (PWM_swt_mode_select_UseControl) */
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 8


 339:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         }
 340:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* PWM_swt_mode_select_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 342:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #if (PWM_swt_mode_select_CompareMode2SW)
 343:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 344:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 345:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_SetCompareMode2
 347:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 349:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 352:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 356:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 357:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 358:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 359:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     void PWM_swt_mode_select_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 362:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 363:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if(0 != PWM_swt_mode_select_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_swt_mode_select_CTRL_CMPMO
 365:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                                  PWM_swt_mode_select_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #else
 367:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             uint8 comparemodemasked = comparemode & PWM_swt_mode_select_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (0 != PWM_swt_mode_select_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 370:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if (PWM_swt_mode_select_UseControl)
 371:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_CONTROL &= ((uint8)(~PWM_swt_mode_select_CTRL_CMPMODE2_MASK)); /*Cl
 372:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_UseControl) */
 374:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 375:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /*PWM_swt_mode_select_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 377:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 379:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 380:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #if (!PWM_swt_mode_select_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 382:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 383:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_WriteCounter
 385:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 387:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 393:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 9


 396:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 397:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 398:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 399:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Side Effects:
 400:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 402:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     void PWM_swt_mode_select_WriteCounter(uint16 counter) \
 404:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                        
 405:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
  62              		.loc 1 405 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67              	.LVL0:
 406:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         CY_SET_REG16(PWM_swt_mode_select_COUNTER_LSB_PTR, counter);
  68              		.loc 1 406 0
  69 0000 014B     		ldr	r3, .L4
  70 0002 1880     		strh	r0, [r3]	@ movhi
  71 0004 7047     		bx	lr
  72              	.L5:
  73 0006 00BF     		.align	2
  74              	.L4:
  75 0008 086A0040 		.word	1073768968
  76              		.cfi_endproc
  77              	.LFE4:
  78              		.size	PWM_swt_mode_select_WriteCounter, .-PWM_swt_mode_select_WriteCounter
  79              		.section	.text.PWM_swt_mode_select_ReadCounter,"ax",%progbits
  80              		.align	2
  81              		.global	PWM_swt_mode_select_ReadCounter
  82              		.thumb
  83              		.thumb_func
  84              		.type	PWM_swt_mode_select_ReadCounter, %function
  85              	PWM_swt_mode_select_ReadCounter:
  86              	.LFB5:
 407:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 408:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 409:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 410:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 411:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_ReadCounter
 412:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 414:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 418:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 420:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 421:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 422:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 424:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     uint16 PWM_swt_mode_select_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
  87              		.loc 1 426 0
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 10


  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
 427:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM_swt_mode_select.c ****           (void)CY_GET_REG8(PWM_swt_mode_select_COUNTERCAP_LSB_PTR_8BIT);
  92              		.loc 1 430 0
  93 0000 024B     		ldr	r3, .L7
  94 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 432:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         return (CY_GET_REG16(PWM_swt_mode_select_CAPTURE_LSB_PTR));
  95              		.loc 1 433 0
  96 0004 024B     		ldr	r3, .L7+4
  97 0006 1888     		ldrh	r0, [r3]
 434:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
  98              		.loc 1 434 0
  99 0008 80B2     		uxth	r0, r0
 100 000a 7047     		bx	lr
 101              	.L8:
 102              		.align	2
 103              	.L7:
 104 000c 14650040 		.word	1073767700
 105 0010 A86A0040 		.word	1073769128
 106              		.cfi_endproc
 107              	.LFE5:
 108              		.size	PWM_swt_mode_select_ReadCounter, .-PWM_swt_mode_select_ReadCounter
 109              		.section	.text.PWM_swt_mode_select_WritePeriod,"ax",%progbits
 110              		.align	2
 111              		.global	PWM_swt_mode_select_WritePeriod
 112              		.thumb
 113              		.thumb_func
 114              		.type	PWM_swt_mode_select_WritePeriod, %function
 115              	PWM_swt_mode_select_WritePeriod:
 116              	.LFB6:
 435:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 436:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_UseStatus)
 437:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 438:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 439:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Function Name: PWM_swt_mode_select_ClearFIFO
 441:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 443:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 446:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *  None
 448:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 449:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         * Return:
 450:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *  None
 451:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *
 452:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         void PWM_swt_mode_select_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         {
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 11


 455:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             while(0u != (PWM_swt_mode_select_ReadStatusRegister() & PWM_swt_mode_select_STATUS_FIFO
 456:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             {
 457:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 (void)PWM_swt_mode_select_ReadCapture();
 458:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             }
 459:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         }
 460:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 461:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* PWM_swt_mode_select_UseStatus */
 462:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 463:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #endif /* !PWM_swt_mode_select_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 465:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 466:Generated_Source\PSoC5/PWM_swt_mode_select.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Function Name: PWM_swt_mode_select_WritePeriod
 468:Generated_Source\PSoC5/PWM_swt_mode_select.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 470:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Summary:
 471:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 474:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 478:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Return:
 479:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  None
 480:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 481:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM_swt_mode_select.c **** void PWM_swt_mode_select_WritePeriod(uint16 period) 
 483:Generated_Source\PSoC5/PWM_swt_mode_select.c **** {
 117              		.loc 1 483 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122              	.LVL1:
 484:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if(PWM_swt_mode_select_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         CY_SET_REG16(PWM_swt_mode_select_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #else
 487:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         CY_SET_REG16(PWM_swt_mode_select_PERIOD_LSB_PTR, period);
 123              		.loc 1 487 0
 124 0000 014B     		ldr	r3, .L10
 125 0002 1880     		strh	r0, [r3]	@ movhi
 126 0004 7047     		bx	lr
 127              	.L11:
 128 0006 00BF     		.align	2
 129              	.L10:
 130 0008 886A0040 		.word	1073769096
 131              		.cfi_endproc
 132              	.LFE6:
 133              		.size	PWM_swt_mode_select_WritePeriod, .-PWM_swt_mode_select_WritePeriod
 134              		.section	.text.PWM_swt_mode_select_WriteCompare,"ax",%progbits
 135              		.align	2
 136              		.global	PWM_swt_mode_select_WriteCompare
 137              		.thumb
 138              		.thumb_func
 139              		.type	PWM_swt_mode_select_WriteCompare, %function
 140              	PWM_swt_mode_select_WriteCompare:
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 12


 141              	.LFB7:
 488:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 489:Generated_Source\PSoC5/PWM_swt_mode_select.c **** }
 490:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 491:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #if (PWM_swt_mode_select_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 493:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 494:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_WriteCompare
 496:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 498:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 505:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 508:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 509:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 510:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 511:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 515:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     void PWM_swt_mode_select_WriteCompare(uint16 compare) \
 517:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                        
 518:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 142              		.loc 1 518 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147              	.LVL2:
 519:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if(PWM_swt_mode_select_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             CY_SET_REG16(PWM_swt_mode_select_COMPARE1_LSB_PTR, (uint16)compare);
 521:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #else
 522:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             CY_SET_REG16(PWM_swt_mode_select_COMPARE1_LSB_PTR, compare);
 148              		.loc 1 522 0
 149 0000 014B     		ldr	r3, .L13
 150 0002 1880     		strh	r0, [r3]	@ movhi
 151 0004 7047     		bx	lr
 152              	.L14:
 153 0006 00BF     		.align	2
 154              	.L13:
 155 0008 486A0040 		.word	1073769032
 156              		.cfi_endproc
 157              	.LFE7:
 158              		.size	PWM_swt_mode_select_WriteCompare, .-PWM_swt_mode_select_WriteCompare
 159              		.section	.text.PWM_swt_mode_select_Init,"ax",%progbits
 160              		.align	2
 161              		.global	PWM_swt_mode_select_Init
 162              		.thumb
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 13


 163              		.thumb_func
 164              		.type	PWM_swt_mode_select_Init, %function
 165              	PWM_swt_mode_select_Init:
 166              	.LFB1:
  85:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if (PWM_swt_mode_select_UsingFixedFunction || PWM_swt_mode_select_UseControl)
 167              		.loc 1 85 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171 0000 08B5     		push	{r3, lr}
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 3, -8
 174              		.cfi_offset 14, -4
 129:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_AUX_CONTROLDP1 |= (PWM_swt_mode_select_AUX_CTRL_FIFO0_CLR);
 175              		.loc 1 129 0
 176 0002 0A4A     		ldr	r2, .L17
 177 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 178 0006 43F00103 		orr	r3, r3, #1
 179 000a 1370     		strb	r3, [r2]
 130:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_Resolution == 8) */
 180              		.loc 1 130 0
 181 000c 0132     		adds	r2, r2, #1
 182 000e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 183 0010 43F00103 		orr	r3, r3, #1
 184 0014 1370     		strb	r3, [r2]
 133:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (!PWM_swt_mode_select_UsingFixedFunction) */
 185              		.loc 1 133 0
 186 0016 6420     		movs	r0, #100
 187 0018 FFF7FEFF 		bl	PWM_swt_mode_select_WriteCounter
 188              	.LVL3:
 136:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 189              		.loc 1 136 0
 190 001c 6420     		movs	r0, #100
 191 001e FFF7FEFF 		bl	PWM_swt_mode_select_WritePeriod
 192              	.LVL4:
 139:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #else
 193              		.loc 1 139 0
 194 0022 3220     		movs	r0, #50
 195 0024 FFF7FEFF 		bl	PWM_swt_mode_select_WriteCompare
 196              	.LVL5:
 197 0028 08BD     		pop	{r3, pc}
 198              	.L18:
 199 002a 00BF     		.align	2
 200              	.L17:
 201 002c 94650040 		.word	1073767828
 202              		.cfi_endproc
 203              	.LFE1:
 204              		.size	PWM_swt_mode_select_Init, .-PWM_swt_mode_select_Init
 205              		.section	.text.PWM_swt_mode_select_Start,"ax",%progbits
 206              		.align	2
 207              		.global	PWM_swt_mode_select_Start
 208              		.thumb
 209              		.thumb_func
 210              		.type	PWM_swt_mode_select_Start, %function
 211              	PWM_swt_mode_select_Start:
 212              	.LFB0:
  56:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /* If not Initialized then initialize all required hardware and software */
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 14


 213              		.loc 1 56 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217 0000 08B5     		push	{r3, lr}
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 3, -8
 220              		.cfi_offset 14, -4
  58:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 221              		.loc 1 58 0
 222 0002 044B     		ldr	r3, .L22
 223 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 224 0006 23B9     		cbnz	r3, .L19
  60:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         PWM_swt_mode_select_initVar = 1u;
 225              		.loc 1 60 0
 226 0008 FFF7FEFF 		bl	PWM_swt_mode_select_Init
 227              	.LVL6:
  61:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 228              		.loc 1 61 0
 229 000c 0122     		movs	r2, #1
 230 000e 014B     		ldr	r3, .L22
 231 0010 1A70     		strb	r2, [r3]
 232              	.L19:
 233 0012 08BD     		pop	{r3, pc}
 234              	.L23:
 235              		.align	2
 236              	.L22:
 237 0014 00000000 		.word	.LANCHOR0
 238              		.cfi_endproc
 239              	.LFE0:
 240              		.size	PWM_swt_mode_select_Start, .-PWM_swt_mode_select_Start
 241              		.section	.text.PWM_swt_mode_select_ReadCapture,"ax",%progbits
 242              		.align	2
 243              		.global	PWM_swt_mode_select_ReadCapture
 244              		.thumb
 245              		.thumb_func
 246              		.type	PWM_swt_mode_select_ReadCapture, %function
 247              	PWM_swt_mode_select_ReadCapture:
 248              	.LFB8:
 523:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 525:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if (PWM_swt_mode_select_PWMMode == PWM_swt_mode_select__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #if(PWM_swt_mode_select_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 CY_SET_REG16(PWM_swt_mode_select_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #else
 529:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 CY_SET_REG16(PWM_swt_mode_select_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_PWMMode == PWM_swt_mode_select__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 533:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 534:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 535:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #else
 536:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 537:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 538:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_WriteCompare1
 540:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 15


 541:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 542:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 548:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 551:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 552:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 553:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 554:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     void PWM_swt_mode_select_WriteCompare1(uint16 compare) \
 556:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                         
 557:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 558:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if(PWM_swt_mode_select_UsingFixedFunction)
 559:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             CY_SET_REG16(PWM_swt_mode_select_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #else
 561:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             CY_SET_REG16(PWM_swt_mode_select_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 564:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 565:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 566:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_WriteCompare2
 568:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 570:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 571:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  mode.
 576:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 577:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 578:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 580:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 581:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 582:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 583:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     void PWM_swt_mode_select_WriteCompare2(uint16 compare) \
 585:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                         
 586:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 587:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if(PWM_swt_mode_select_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             CY_SET_REG16(PWM_swt_mode_select_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #else
 590:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             CY_SET_REG16(PWM_swt_mode_select_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 593:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 595:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #if (PWM_swt_mode_select_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 597:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 16


 598:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_WriteDeadTime
 600:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 602:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 605:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 608:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 609:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 610:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 611:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     void PWM_swt_mode_select_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 614:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if(!PWM_swt_mode_select_DeadBand2_4)
 616:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             CY_SET_REG8(PWM_swt_mode_select_DEADBAND_COUNT_PTR, deadtime);
 617:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #else
 618:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             PWM_swt_mode_select_DEADBAND_COUNT &= ((uint8)(~PWM_swt_mode_select_DEADBAND_COUNT_MASK
 621:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 622:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #if(PWM_swt_mode_select_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 PWM_swt_mode_select_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_swt_mode_sele
 625:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                                     PWM_swt_mode_select_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #else
 627:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 PWM_swt_mode_select_DEADBAND_COUNT |= deadtime & PWM_swt_mode_select_DEADBAND_COUNT
 628:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #endif /* (PWM_swt_mode_select_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 630:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (!PWM_swt_mode_select_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 632:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 633:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 634:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_ReadDeadTime
 636:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 638:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 641:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 643:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 644:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 645:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 647:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     uint8 PWM_swt_mode_select_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 650:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if(!PWM_swt_mode_select_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             return (CY_GET_REG8(PWM_swt_mode_select_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #else
 654:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 17


 655:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #if(PWM_swt_mode_select_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 return ((uint8)(((uint8)(PWM_swt_mode_select_DEADBAND_COUNT & PWM_swt_mode_select_D
 658:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                                                                            PWM_swt_mode_select_DEAD
 659:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #else
 660:Generated_Source\PSoC5/PWM_swt_mode_select.c ****                 return (PWM_swt_mode_select_DEADBAND_COUNT & PWM_swt_mode_select_DEADBAND_COUNT_MAS
 661:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             #endif /* (PWM_swt_mode_select_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (!PWM_swt_mode_select_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 664:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 666:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #if (PWM_swt_mode_select_UseStatus || PWM_swt_mode_select_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 668:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 669:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_SetInterruptMode
 671:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 673:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 674:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 677:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 680:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 681:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 682:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 683:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     void PWM_swt_mode_select_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 686:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         CY_SET_REG8(PWM_swt_mode_select_STATUS_MASK_PTR, interruptMode);
 687:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 688:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 689:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 690:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 694:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 697:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 698:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 699:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 700:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 701:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 710:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     uint8 PWM_swt_mode_select_ReadStatusRegister(void) 
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 18


 712:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 713:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         return (CY_GET_REG8(PWM_swt_mode_select_STATUS_PTR));
 714:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 715:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 716:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #endif /* (PWM_swt_mode_select_UseStatus || PWM_swt_mode_select_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 718:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 719:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #if (PWM_swt_mode_select_UseControl)
 720:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 721:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 722:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_ReadControlRegister
 724:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 726:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 730:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 732:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 733:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 734:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 736:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     uint8 PWM_swt_mode_select_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 739:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 741:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         result = CY_GET_REG8(PWM_swt_mode_select_CONTROL_PTR);
 742:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         return (result);
 743:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 744:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 745:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 746:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_WriteControlRegister
 748:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 750:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 754:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 755:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 761:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 762:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 763:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 764:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     void PWM_swt_mode_select_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 767:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         CY_SET_REG8(PWM_swt_mode_select_CONTROL_PTR, control);
 768:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 19


 769:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 770:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #endif /* (PWM_swt_mode_select_UseControl) */
 771:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 772:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 773:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #if (!PWM_swt_mode_select_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 775:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 776:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_ReadCapture
 778:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 780:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 783:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 785:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 786:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 787:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 789:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     uint16 PWM_swt_mode_select_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 249              		.loc 1 791 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 792:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         return (CY_GET_REG16(PWM_swt_mode_select_CAPTURE_LSB_PTR));
 254              		.loc 1 792 0
 255 0000 014B     		ldr	r3, .L25
 256 0002 1888     		ldrh	r0, [r3]
 793:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 257              		.loc 1 793 0
 258 0004 80B2     		uxth	r0, r0
 259 0006 7047     		bx	lr
 260              	.L26:
 261              		.align	2
 262              	.L25:
 263 0008 A86A0040 		.word	1073769128
 264              		.cfi_endproc
 265              	.LFE8:
 266              		.size	PWM_swt_mode_select_ReadCapture, .-PWM_swt_mode_select_ReadCapture
 267              		.section	.text.PWM_swt_mode_select_ReadCompare,"ax",%progbits
 268              		.align	2
 269              		.global	PWM_swt_mode_select_ReadCompare
 270              		.thumb
 271              		.thumb_func
 272              		.type	PWM_swt_mode_select_ReadCompare, %function
 273              	PWM_swt_mode_select_ReadCompare:
 274              	.LFB9:
 794:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 795:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #endif /* (!PWM_swt_mode_select_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 797:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 798:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #if (PWM_swt_mode_select_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 20


 800:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 801:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_ReadCompare
 803:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 805:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 809:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 811:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 812:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 813:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 815:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     uint16 PWM_swt_mode_select_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 275              		.loc 1 817 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 818:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #if(PWM_swt_mode_select_UsingFixedFunction)
 819:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             return ((uint16)CY_GET_REG16(PWM_swt_mode_select_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #else
 821:Generated_Source\PSoC5/PWM_swt_mode_select.c ****             return (CY_GET_REG16(PWM_swt_mode_select_COMPARE1_LSB_PTR));
 280              		.loc 1 821 0
 281 0000 014B     		ldr	r3, .L28
 282 0002 1888     		ldrh	r0, [r3]
 822:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 283              		.loc 1 823 0
 284 0004 80B2     		uxth	r0, r0
 285 0006 7047     		bx	lr
 286              	.L29:
 287              		.align	2
 288              	.L28:
 289 0008 486A0040 		.word	1073769032
 290              		.cfi_endproc
 291              	.LFE9:
 292              		.size	PWM_swt_mode_select_ReadCompare, .-PWM_swt_mode_select_ReadCompare
 293              		.section	.text.PWM_swt_mode_select_ReadPeriod,"ax",%progbits
 294              		.align	2
 295              		.global	PWM_swt_mode_select_ReadPeriod
 296              		.thumb
 297              		.thumb_func
 298              		.type	PWM_swt_mode_select_ReadPeriod, %function
 299              	PWM_swt_mode_select_ReadPeriod:
 300              	.LFB10:
 824:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 825:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #else
 826:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 827:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 828:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_ReadCompare1
 830:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 21


 831:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 832:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 835:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 837:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 838:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 839:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 841:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     uint16 PWM_swt_mode_select_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 844:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         return (CY_GET_REG16(PWM_swt_mode_select_COMPARE1_LSB_PTR));
 845:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 846:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 847:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 848:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Function Name: PWM_swt_mode_select_ReadCompare2
 850:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 852:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 855:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  None
 857:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 858:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     * Return:
 859:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *
 861:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     uint16 PWM_swt_mode_select_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     {
 864:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         return (CY_GET_REG16(PWM_swt_mode_select_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     }
 866:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 867:Generated_Source\PSoC5/PWM_swt_mode_select.c **** #endif /* (PWM_swt_mode_select_UseOneCompareMode) */
 868:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 869:Generated_Source\PSoC5/PWM_swt_mode_select.c **** 
 870:Generated_Source\PSoC5/PWM_swt_mode_select.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Function Name: PWM_swt_mode_select_ReadPeriod
 872:Generated_Source\PSoC5/PWM_swt_mode_select.c **** ********************************************************************************
 873:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 874:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Summary:
 875:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 877:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  None
 879:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 880:Generated_Source\PSoC5/PWM_swt_mode_select.c **** * Return:
 881:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *
 883:Generated_Source\PSoC5/PWM_swt_mode_select.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM_swt_mode_select.c **** uint16 PWM_swt_mode_select_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM_swt_mode_select.c **** {
 301              		.loc 1 885 0
 302              		.cfi_startproc
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 22


 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 886:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #if(PWM_swt_mode_select_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         return ((uint16)CY_GET_REG16(PWM_swt_mode_select_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #else
 889:Generated_Source\PSoC5/PWM_swt_mode_select.c ****         return (CY_GET_REG16(PWM_swt_mode_select_PERIOD_LSB_PTR));
 306              		.loc 1 889 0
 307 0000 014B     		ldr	r3, .L31
 308 0002 1888     		ldrh	r0, [r3]
 890:Generated_Source\PSoC5/PWM_swt_mode_select.c ****     #endif /* (PWM_swt_mode_select_UsingFixedFunction) */
 891:Generated_Source\PSoC5/PWM_swt_mode_select.c **** }
 309              		.loc 1 891 0
 310 0004 80B2     		uxth	r0, r0
 311 0006 7047     		bx	lr
 312              	.L32:
 313              		.align	2
 314              	.L31:
 315 0008 886A0040 		.word	1073769096
 316              		.cfi_endproc
 317              	.LFE10:
 318              		.size	PWM_swt_mode_select_ReadPeriod, .-PWM_swt_mode_select_ReadPeriod
 319              		.global	PWM_swt_mode_select_initVar
 320              		.bss
 321              		.set	.LANCHOR0,. + 0
 322              		.type	PWM_swt_mode_select_initVar, %object
 323              		.size	PWM_swt_mode_select_initVar, 1
 324              	PWM_swt_mode_select_initVar:
 325 0000 00       		.space	1
 326              		.text
 327              	.Letext0:
 328              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 329              		.section	.debug_info,"",%progbits
 330              	.Ldebug_info0:
 331 0000 2C020000 		.4byte	0x22c
 332 0004 0400     		.2byte	0x4
 333 0006 00000000 		.4byte	.Ldebug_abbrev0
 334 000a 04       		.byte	0x4
 335 000b 01       		.uleb128 0x1
 336 000c B1000000 		.4byte	.LASF32
 337 0010 0C       		.byte	0xc
 338 0011 BC020000 		.4byte	.LASF33
 339 0015 5C010000 		.4byte	.LASF34
 340 0019 00000000 		.4byte	.Ldebug_ranges0+0
 341 001d 00000000 		.4byte	0
 342 0021 00000000 		.4byte	.Ldebug_line0
 343 0025 02       		.uleb128 0x2
 344 0026 01       		.byte	0x1
 345 0027 06       		.byte	0x6
 346 0028 41030000 		.4byte	.LASF0
 347 002c 02       		.uleb128 0x2
 348 002d 01       		.byte	0x1
 349 002e 08       		.byte	0x8
 350 002f A3000000 		.4byte	.LASF1
 351 0033 02       		.uleb128 0x2
 352 0034 02       		.byte	0x2
 353 0035 05       		.byte	0x5
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 23


 354 0036 E9020000 		.4byte	.LASF2
 355 003a 02       		.uleb128 0x2
 356 003b 02       		.byte	0x2
 357 003c 07       		.byte	0x7
 358 003d 69000000 		.4byte	.LASF3
 359 0041 02       		.uleb128 0x2
 360 0042 04       		.byte	0x4
 361 0043 05       		.byte	0x5
 362 0044 2C030000 		.4byte	.LASF4
 363 0048 02       		.uleb128 0x2
 364 0049 04       		.byte	0x4
 365 004a 07       		.byte	0x7
 366 004b 44010000 		.4byte	.LASF5
 367 004f 02       		.uleb128 0x2
 368 0050 08       		.byte	0x8
 369 0051 05       		.byte	0x5
 370 0052 A9020000 		.4byte	.LASF6
 371 0056 02       		.uleb128 0x2
 372 0057 08       		.byte	0x8
 373 0058 07       		.byte	0x7
 374 0059 4D020000 		.4byte	.LASF7
 375 005d 03       		.uleb128 0x3
 376 005e 04       		.byte	0x4
 377 005f 05       		.byte	0x5
 378 0060 696E7400 		.ascii	"int\000"
 379 0064 02       		.uleb128 0x2
 380 0065 04       		.byte	0x4
 381 0066 07       		.byte	0x7
 382 0067 40020000 		.4byte	.LASF8
 383 006b 04       		.uleb128 0x4
 384 006c 56010000 		.4byte	.LASF9
 385 0070 02       		.byte	0x2
 386 0071 E901     		.2byte	0x1e9
 387 0073 2C000000 		.4byte	0x2c
 388 0077 04       		.uleb128 0x4
 389 0078 1F020000 		.4byte	.LASF10
 390 007c 02       		.byte	0x2
 391 007d EA01     		.2byte	0x1ea
 392 007f 3A000000 		.4byte	0x3a
 393 0083 02       		.uleb128 0x2
 394 0084 04       		.byte	0x4
 395 0085 04       		.byte	0x4
 396 0086 95000000 		.4byte	.LASF11
 397 008a 02       		.uleb128 0x2
 398 008b 08       		.byte	0x8
 399 008c 04       		.byte	0x4
 400 008d D9010000 		.4byte	.LASF12
 401 0091 02       		.uleb128 0x2
 402 0092 01       		.byte	0x1
 403 0093 08       		.byte	0x8
 404 0094 B7020000 		.4byte	.LASF13
 405 0098 04       		.uleb128 0x4
 406 0099 3F010000 		.4byte	.LASF14
 407 009d 02       		.byte	0x2
 408 009e 9302     		.2byte	0x293
 409 00a0 A4000000 		.4byte	0xa4
 410 00a4 05       		.uleb128 0x5
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 24


 411 00a5 6B000000 		.4byte	0x6b
 412 00a9 04       		.uleb128 0x4
 413 00aa 00000000 		.4byte	.LASF15
 414 00ae 02       		.byte	0x2
 415 00af 9402     		.2byte	0x294
 416 00b1 B5000000 		.4byte	0xb5
 417 00b5 05       		.uleb128 0x5
 418 00b6 77000000 		.4byte	0x77
 419 00ba 02       		.uleb128 0x2
 420 00bb 08       		.byte	0x8
 421 00bc 04       		.byte	0x4
 422 00bd 35030000 		.4byte	.LASF16
 423 00c1 02       		.uleb128 0x2
 424 00c2 04       		.byte	0x4
 425 00c3 07       		.byte	0x7
 426 00c4 A0020000 		.4byte	.LASF17
 427 00c8 06       		.uleb128 0x6
 428 00c9 06000000 		.4byte	.LASF18
 429 00cd 01       		.byte	0x1
 430 00ce C7       		.byte	0xc7
 431 00cf 00000000 		.4byte	.LFB2
 432 00d3 02000000 		.4byte	.LFE2-.LFB2
 433 00d7 01       		.uleb128 0x1
 434 00d8 9C       		.byte	0x9c
 435 00d9 06       		.uleb128 0x6
 436 00da 13030000 		.4byte	.LASF19
 437 00de 01       		.byte	0x1
 438 00df E9       		.byte	0xe9
 439 00e0 00000000 		.4byte	.LFB3
 440 00e4 02000000 		.4byte	.LFE3-.LFB3
 441 00e8 01       		.uleb128 0x1
 442 00e9 9C       		.byte	0x9c
 443 00ea 07       		.uleb128 0x7
 444 00eb B8010000 		.4byte	.LASF20
 445 00ef 01       		.byte	0x1
 446 00f0 9301     		.2byte	0x193
 447 00f2 00000000 		.4byte	.LFB4
 448 00f6 0C000000 		.4byte	.LFE4-.LFB4
 449 00fa 01       		.uleb128 0x1
 450 00fb 9C       		.byte	0x9c
 451 00fc 0F010000 		.4byte	0x10f
 452 0100 08       		.uleb128 0x8
 453 0101 9B000000 		.4byte	.LASF22
 454 0105 01       		.byte	0x1
 455 0106 9301     		.2byte	0x193
 456 0108 77000000 		.4byte	0x77
 457 010c 01       		.uleb128 0x1
 458 010d 50       		.byte	0x50
 459 010e 00       		.byte	0
 460 010f 09       		.uleb128 0x9
 461 0110 F3020000 		.4byte	.LASF28
 462 0114 01       		.byte	0x1
 463 0115 A901     		.2byte	0x1a9
 464 0117 77000000 		.4byte	0x77
 465 011b 00000000 		.4byte	.LFB5
 466 011f 14000000 		.4byte	.LFE5-.LFB5
 467 0123 01       		.uleb128 0x1
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 25


 468 0124 9C       		.byte	0x9c
 469 0125 07       		.uleb128 0x7
 470 0126 49000000 		.4byte	.LASF21
 471 012a 01       		.byte	0x1
 472 012b E201     		.2byte	0x1e2
 473 012d 00000000 		.4byte	.LFB6
 474 0131 0C000000 		.4byte	.LFE6-.LFB6
 475 0135 01       		.uleb128 0x1
 476 0136 9C       		.byte	0x9c
 477 0137 4A010000 		.4byte	0x14a
 478 013b 08       		.uleb128 0x8
 479 013c 42000000 		.4byte	.LASF23
 480 0140 01       		.byte	0x1
 481 0141 E201     		.2byte	0x1e2
 482 0143 77000000 		.4byte	0x77
 483 0147 01       		.uleb128 0x1
 484 0148 50       		.byte	0x50
 485 0149 00       		.byte	0
 486 014a 07       		.uleb128 0x7
 487 014b 21000000 		.4byte	.LASF24
 488 014f 01       		.byte	0x1
 489 0150 0402     		.2byte	0x204
 490 0152 00000000 		.4byte	.LFB7
 491 0156 0C000000 		.4byte	.LFE7-.LFB7
 492 015a 01       		.uleb128 0x1
 493 015b 9C       		.byte	0x9c
 494 015c 6F010000 		.4byte	0x16f
 495 0160 08       		.uleb128 0x8
 496 0161 4D030000 		.4byte	.LASF25
 497 0165 01       		.byte	0x1
 498 0166 0402     		.2byte	0x204
 499 0168 77000000 		.4byte	0x77
 500 016c 01       		.uleb128 0x1
 501 016d 50       		.byte	0x50
 502 016e 00       		.byte	0
 503 016f 0A       		.uleb128 0xa
 504 0170 7C000000 		.4byte	.LASF26
 505 0174 01       		.byte	0x1
 506 0175 54       		.byte	0x54
 507 0176 00000000 		.4byte	.LFB1
 508 017a 30000000 		.4byte	.LFE1-.LFB1
 509 017e 01       		.uleb128 0x1
 510 017f 9C       		.byte	0x9c
 511 0180 BD010000 		.4byte	0x1bd
 512 0184 0B       		.uleb128 0xb
 513 0185 1C000000 		.4byte	.LVL3
 514 0189 EA000000 		.4byte	0xea
 515 018d 98010000 		.4byte	0x198
 516 0191 0C       		.uleb128 0xc
 517 0192 01       		.uleb128 0x1
 518 0193 50       		.byte	0x50
 519 0194 02       		.uleb128 0x2
 520 0195 08       		.byte	0x8
 521 0196 64       		.byte	0x64
 522 0197 00       		.byte	0
 523 0198 0B       		.uleb128 0xb
 524 0199 22000000 		.4byte	.LVL4
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 26


 525 019d 25010000 		.4byte	0x125
 526 01a1 AC010000 		.4byte	0x1ac
 527 01a5 0C       		.uleb128 0xc
 528 01a6 01       		.uleb128 0x1
 529 01a7 50       		.byte	0x50
 530 01a8 02       		.uleb128 0x2
 531 01a9 08       		.byte	0x8
 532 01aa 64       		.byte	0x64
 533 01ab 00       		.byte	0
 534 01ac 0D       		.uleb128 0xd
 535 01ad 28000000 		.4byte	.LVL5
 536 01b1 4A010000 		.4byte	0x14a
 537 01b5 0C       		.uleb128 0xc
 538 01b6 01       		.uleb128 0x1
 539 01b7 50       		.byte	0x50
 540 01b8 02       		.uleb128 0x2
 541 01b9 08       		.byte	0x8
 542 01ba 32       		.byte	0x32
 543 01bb 00       		.byte	0
 544 01bc 00       		.byte	0
 545 01bd 0A       		.uleb128 0xa
 546 01be 26020000 		.4byte	.LASF27
 547 01c2 01       		.byte	0x1
 548 01c3 37       		.byte	0x37
 549 01c4 00000000 		.4byte	.LFB0
 550 01c8 18000000 		.4byte	.LFE0-.LFB0
 551 01cc 01       		.uleb128 0x1
 552 01cd 9C       		.byte	0x9c
 553 01ce DC010000 		.4byte	0x1dc
 554 01d2 0E       		.uleb128 0xe
 555 01d3 0C000000 		.4byte	.LVL6
 556 01d7 6F010000 		.4byte	0x16f
 557 01db 00       		.byte	0
 558 01dc 09       		.uleb128 0x9
 559 01dd 64020000 		.4byte	.LASF29
 560 01e1 01       		.byte	0x1
 561 01e2 1603     		.2byte	0x316
 562 01e4 77000000 		.4byte	0x77
 563 01e8 00000000 		.4byte	.LFB8
 564 01ec 0C000000 		.4byte	.LFE8-.LFB8
 565 01f0 01       		.uleb128 0x1
 566 01f1 9C       		.byte	0x9c
 567 01f2 09       		.uleb128 0x9
 568 01f3 FF010000 		.4byte	.LASF30
 569 01f7 01       		.byte	0x1
 570 01f8 3003     		.2byte	0x330
 571 01fa 77000000 		.4byte	0x77
 572 01fe 00000000 		.4byte	.LFB9
 573 0202 0C000000 		.4byte	.LFE9-.LFB9
 574 0206 01       		.uleb128 0x1
 575 0207 9C       		.byte	0x9c
 576 0208 09       		.uleb128 0x9
 577 0209 E0010000 		.4byte	.LASF31
 578 020d 01       		.byte	0x1
 579 020e 7403     		.2byte	0x374
 580 0210 77000000 		.4byte	0x77
 581 0214 00000000 		.4byte	.LFB10
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 27


 582 0218 0C000000 		.4byte	.LFE10-.LFB10
 583 021c 01       		.uleb128 0x1
 584 021d 9C       		.byte	0x9c
 585 021e 0F       		.uleb128 0xf
 586 021f 84020000 		.4byte	.LASF35
 587 0223 01       		.byte	0x1
 588 0224 20       		.byte	0x20
 589 0225 6B000000 		.4byte	0x6b
 590 0229 05       		.uleb128 0x5
 591 022a 03       		.byte	0x3
 592 022b 00000000 		.4byte	PWM_swt_mode_select_initVar
 593 022f 00       		.byte	0
 594              		.section	.debug_abbrev,"",%progbits
 595              	.Ldebug_abbrev0:
 596 0000 01       		.uleb128 0x1
 597 0001 11       		.uleb128 0x11
 598 0002 01       		.byte	0x1
 599 0003 25       		.uleb128 0x25
 600 0004 0E       		.uleb128 0xe
 601 0005 13       		.uleb128 0x13
 602 0006 0B       		.uleb128 0xb
 603 0007 03       		.uleb128 0x3
 604 0008 0E       		.uleb128 0xe
 605 0009 1B       		.uleb128 0x1b
 606 000a 0E       		.uleb128 0xe
 607 000b 55       		.uleb128 0x55
 608 000c 17       		.uleb128 0x17
 609 000d 11       		.uleb128 0x11
 610 000e 01       		.uleb128 0x1
 611 000f 10       		.uleb128 0x10
 612 0010 17       		.uleb128 0x17
 613 0011 00       		.byte	0
 614 0012 00       		.byte	0
 615 0013 02       		.uleb128 0x2
 616 0014 24       		.uleb128 0x24
 617 0015 00       		.byte	0
 618 0016 0B       		.uleb128 0xb
 619 0017 0B       		.uleb128 0xb
 620 0018 3E       		.uleb128 0x3e
 621 0019 0B       		.uleb128 0xb
 622 001a 03       		.uleb128 0x3
 623 001b 0E       		.uleb128 0xe
 624 001c 00       		.byte	0
 625 001d 00       		.byte	0
 626 001e 03       		.uleb128 0x3
 627 001f 24       		.uleb128 0x24
 628 0020 00       		.byte	0
 629 0021 0B       		.uleb128 0xb
 630 0022 0B       		.uleb128 0xb
 631 0023 3E       		.uleb128 0x3e
 632 0024 0B       		.uleb128 0xb
 633 0025 03       		.uleb128 0x3
 634 0026 08       		.uleb128 0x8
 635 0027 00       		.byte	0
 636 0028 00       		.byte	0
 637 0029 04       		.uleb128 0x4
 638 002a 16       		.uleb128 0x16
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 28


 639 002b 00       		.byte	0
 640 002c 03       		.uleb128 0x3
 641 002d 0E       		.uleb128 0xe
 642 002e 3A       		.uleb128 0x3a
 643 002f 0B       		.uleb128 0xb
 644 0030 3B       		.uleb128 0x3b
 645 0031 05       		.uleb128 0x5
 646 0032 49       		.uleb128 0x49
 647 0033 13       		.uleb128 0x13
 648 0034 00       		.byte	0
 649 0035 00       		.byte	0
 650 0036 05       		.uleb128 0x5
 651 0037 35       		.uleb128 0x35
 652 0038 00       		.byte	0
 653 0039 49       		.uleb128 0x49
 654 003a 13       		.uleb128 0x13
 655 003b 00       		.byte	0
 656 003c 00       		.byte	0
 657 003d 06       		.uleb128 0x6
 658 003e 2E       		.uleb128 0x2e
 659 003f 00       		.byte	0
 660 0040 3F       		.uleb128 0x3f
 661 0041 19       		.uleb128 0x19
 662 0042 03       		.uleb128 0x3
 663 0043 0E       		.uleb128 0xe
 664 0044 3A       		.uleb128 0x3a
 665 0045 0B       		.uleb128 0xb
 666 0046 3B       		.uleb128 0x3b
 667 0047 0B       		.uleb128 0xb
 668 0048 27       		.uleb128 0x27
 669 0049 19       		.uleb128 0x19
 670 004a 11       		.uleb128 0x11
 671 004b 01       		.uleb128 0x1
 672 004c 12       		.uleb128 0x12
 673 004d 06       		.uleb128 0x6
 674 004e 40       		.uleb128 0x40
 675 004f 18       		.uleb128 0x18
 676 0050 9742     		.uleb128 0x2117
 677 0052 19       		.uleb128 0x19
 678 0053 00       		.byte	0
 679 0054 00       		.byte	0
 680 0055 07       		.uleb128 0x7
 681 0056 2E       		.uleb128 0x2e
 682 0057 01       		.byte	0x1
 683 0058 3F       		.uleb128 0x3f
 684 0059 19       		.uleb128 0x19
 685 005a 03       		.uleb128 0x3
 686 005b 0E       		.uleb128 0xe
 687 005c 3A       		.uleb128 0x3a
 688 005d 0B       		.uleb128 0xb
 689 005e 3B       		.uleb128 0x3b
 690 005f 05       		.uleb128 0x5
 691 0060 27       		.uleb128 0x27
 692 0061 19       		.uleb128 0x19
 693 0062 11       		.uleb128 0x11
 694 0063 01       		.uleb128 0x1
 695 0064 12       		.uleb128 0x12
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 29


 696 0065 06       		.uleb128 0x6
 697 0066 40       		.uleb128 0x40
 698 0067 18       		.uleb128 0x18
 699 0068 9742     		.uleb128 0x2117
 700 006a 19       		.uleb128 0x19
 701 006b 01       		.uleb128 0x1
 702 006c 13       		.uleb128 0x13
 703 006d 00       		.byte	0
 704 006e 00       		.byte	0
 705 006f 08       		.uleb128 0x8
 706 0070 05       		.uleb128 0x5
 707 0071 00       		.byte	0
 708 0072 03       		.uleb128 0x3
 709 0073 0E       		.uleb128 0xe
 710 0074 3A       		.uleb128 0x3a
 711 0075 0B       		.uleb128 0xb
 712 0076 3B       		.uleb128 0x3b
 713 0077 05       		.uleb128 0x5
 714 0078 49       		.uleb128 0x49
 715 0079 13       		.uleb128 0x13
 716 007a 02       		.uleb128 0x2
 717 007b 18       		.uleb128 0x18
 718 007c 00       		.byte	0
 719 007d 00       		.byte	0
 720 007e 09       		.uleb128 0x9
 721 007f 2E       		.uleb128 0x2e
 722 0080 00       		.byte	0
 723 0081 3F       		.uleb128 0x3f
 724 0082 19       		.uleb128 0x19
 725 0083 03       		.uleb128 0x3
 726 0084 0E       		.uleb128 0xe
 727 0085 3A       		.uleb128 0x3a
 728 0086 0B       		.uleb128 0xb
 729 0087 3B       		.uleb128 0x3b
 730 0088 05       		.uleb128 0x5
 731 0089 27       		.uleb128 0x27
 732 008a 19       		.uleb128 0x19
 733 008b 49       		.uleb128 0x49
 734 008c 13       		.uleb128 0x13
 735 008d 11       		.uleb128 0x11
 736 008e 01       		.uleb128 0x1
 737 008f 12       		.uleb128 0x12
 738 0090 06       		.uleb128 0x6
 739 0091 40       		.uleb128 0x40
 740 0092 18       		.uleb128 0x18
 741 0093 9742     		.uleb128 0x2117
 742 0095 19       		.uleb128 0x19
 743 0096 00       		.byte	0
 744 0097 00       		.byte	0
 745 0098 0A       		.uleb128 0xa
 746 0099 2E       		.uleb128 0x2e
 747 009a 01       		.byte	0x1
 748 009b 3F       		.uleb128 0x3f
 749 009c 19       		.uleb128 0x19
 750 009d 03       		.uleb128 0x3
 751 009e 0E       		.uleb128 0xe
 752 009f 3A       		.uleb128 0x3a
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 30


 753 00a0 0B       		.uleb128 0xb
 754 00a1 3B       		.uleb128 0x3b
 755 00a2 0B       		.uleb128 0xb
 756 00a3 27       		.uleb128 0x27
 757 00a4 19       		.uleb128 0x19
 758 00a5 11       		.uleb128 0x11
 759 00a6 01       		.uleb128 0x1
 760 00a7 12       		.uleb128 0x12
 761 00a8 06       		.uleb128 0x6
 762 00a9 40       		.uleb128 0x40
 763 00aa 18       		.uleb128 0x18
 764 00ab 9742     		.uleb128 0x2117
 765 00ad 19       		.uleb128 0x19
 766 00ae 01       		.uleb128 0x1
 767 00af 13       		.uleb128 0x13
 768 00b0 00       		.byte	0
 769 00b1 00       		.byte	0
 770 00b2 0B       		.uleb128 0xb
 771 00b3 898201   		.uleb128 0x4109
 772 00b6 01       		.byte	0x1
 773 00b7 11       		.uleb128 0x11
 774 00b8 01       		.uleb128 0x1
 775 00b9 31       		.uleb128 0x31
 776 00ba 13       		.uleb128 0x13
 777 00bb 01       		.uleb128 0x1
 778 00bc 13       		.uleb128 0x13
 779 00bd 00       		.byte	0
 780 00be 00       		.byte	0
 781 00bf 0C       		.uleb128 0xc
 782 00c0 8A8201   		.uleb128 0x410a
 783 00c3 00       		.byte	0
 784 00c4 02       		.uleb128 0x2
 785 00c5 18       		.uleb128 0x18
 786 00c6 9142     		.uleb128 0x2111
 787 00c8 18       		.uleb128 0x18
 788 00c9 00       		.byte	0
 789 00ca 00       		.byte	0
 790 00cb 0D       		.uleb128 0xd
 791 00cc 898201   		.uleb128 0x4109
 792 00cf 01       		.byte	0x1
 793 00d0 11       		.uleb128 0x11
 794 00d1 01       		.uleb128 0x1
 795 00d2 31       		.uleb128 0x31
 796 00d3 13       		.uleb128 0x13
 797 00d4 00       		.byte	0
 798 00d5 00       		.byte	0
 799 00d6 0E       		.uleb128 0xe
 800 00d7 898201   		.uleb128 0x4109
 801 00da 00       		.byte	0
 802 00db 11       		.uleb128 0x11
 803 00dc 01       		.uleb128 0x1
 804 00dd 31       		.uleb128 0x31
 805 00de 13       		.uleb128 0x13
 806 00df 00       		.byte	0
 807 00e0 00       		.byte	0
 808 00e1 0F       		.uleb128 0xf
 809 00e2 34       		.uleb128 0x34
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 31


 810 00e3 00       		.byte	0
 811 00e4 03       		.uleb128 0x3
 812 00e5 0E       		.uleb128 0xe
 813 00e6 3A       		.uleb128 0x3a
 814 00e7 0B       		.uleb128 0xb
 815 00e8 3B       		.uleb128 0x3b
 816 00e9 0B       		.uleb128 0xb
 817 00ea 49       		.uleb128 0x49
 818 00eb 13       		.uleb128 0x13
 819 00ec 3F       		.uleb128 0x3f
 820 00ed 19       		.uleb128 0x19
 821 00ee 02       		.uleb128 0x2
 822 00ef 18       		.uleb128 0x18
 823 00f0 00       		.byte	0
 824 00f1 00       		.byte	0
 825 00f2 00       		.byte	0
 826              		.section	.debug_aranges,"",%progbits
 827 0000 6C000000 		.4byte	0x6c
 828 0004 0200     		.2byte	0x2
 829 0006 00000000 		.4byte	.Ldebug_info0
 830 000a 04       		.byte	0x4
 831 000b 00       		.byte	0
 832 000c 0000     		.2byte	0
 833 000e 0000     		.2byte	0
 834 0010 00000000 		.4byte	.LFB2
 835 0014 02000000 		.4byte	.LFE2-.LFB2
 836 0018 00000000 		.4byte	.LFB3
 837 001c 02000000 		.4byte	.LFE3-.LFB3
 838 0020 00000000 		.4byte	.LFB4
 839 0024 0C000000 		.4byte	.LFE4-.LFB4
 840 0028 00000000 		.4byte	.LFB5
 841 002c 14000000 		.4byte	.LFE5-.LFB5
 842 0030 00000000 		.4byte	.LFB6
 843 0034 0C000000 		.4byte	.LFE6-.LFB6
 844 0038 00000000 		.4byte	.LFB7
 845 003c 0C000000 		.4byte	.LFE7-.LFB7
 846 0040 00000000 		.4byte	.LFB1
 847 0044 30000000 		.4byte	.LFE1-.LFB1
 848 0048 00000000 		.4byte	.LFB0
 849 004c 18000000 		.4byte	.LFE0-.LFB0
 850 0050 00000000 		.4byte	.LFB8
 851 0054 0C000000 		.4byte	.LFE8-.LFB8
 852 0058 00000000 		.4byte	.LFB9
 853 005c 0C000000 		.4byte	.LFE9-.LFB9
 854 0060 00000000 		.4byte	.LFB10
 855 0064 0C000000 		.4byte	.LFE10-.LFB10
 856 0068 00000000 		.4byte	0
 857 006c 00000000 		.4byte	0
 858              		.section	.debug_ranges,"",%progbits
 859              	.Ldebug_ranges0:
 860 0000 00000000 		.4byte	.LFB2
 861 0004 02000000 		.4byte	.LFE2
 862 0008 00000000 		.4byte	.LFB3
 863 000c 02000000 		.4byte	.LFE3
 864 0010 00000000 		.4byte	.LFB4
 865 0014 0C000000 		.4byte	.LFE4
 866 0018 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 32


 867 001c 14000000 		.4byte	.LFE5
 868 0020 00000000 		.4byte	.LFB6
 869 0024 0C000000 		.4byte	.LFE6
 870 0028 00000000 		.4byte	.LFB7
 871 002c 0C000000 		.4byte	.LFE7
 872 0030 00000000 		.4byte	.LFB1
 873 0034 30000000 		.4byte	.LFE1
 874 0038 00000000 		.4byte	.LFB0
 875 003c 18000000 		.4byte	.LFE0
 876 0040 00000000 		.4byte	.LFB8
 877 0044 0C000000 		.4byte	.LFE8
 878 0048 00000000 		.4byte	.LFB9
 879 004c 0C000000 		.4byte	.LFE9
 880 0050 00000000 		.4byte	.LFB10
 881 0054 0C000000 		.4byte	.LFE10
 882 0058 00000000 		.4byte	0
 883 005c 00000000 		.4byte	0
 884              		.section	.debug_line,"",%progbits
 885              	.Ldebug_line0:
 886 0000 1B010000 		.section	.debug_str,"MS",%progbits,1
 886      02005000 
 886      00000201 
 886      FB0E0D00 
 886      01010101 
 887              	.LASF15:
 888 0000 72656731 		.ascii	"reg16\000"
 888      3600
 889              	.LASF18:
 890 0006 50574D5F 		.ascii	"PWM_swt_mode_select_Enable\000"
 890      7377745F 
 890      6D6F6465 
 890      5F73656C 
 890      6563745F 
 891              	.LASF24:
 892 0021 50574D5F 		.ascii	"PWM_swt_mode_select_WriteCompare\000"
 892      7377745F 
 892      6D6F6465 
 892      5F73656C 
 892      6563745F 
 893              	.LASF23:
 894 0042 70657269 		.ascii	"period\000"
 894      6F6400
 895              	.LASF21:
 896 0049 50574D5F 		.ascii	"PWM_swt_mode_select_WritePeriod\000"
 896      7377745F 
 896      6D6F6465 
 896      5F73656C 
 896      6563745F 
 897              	.LASF3:
 898 0069 73686F72 		.ascii	"short unsigned int\000"
 898      7420756E 
 898      7369676E 
 898      65642069 
 898      6E7400
 899              	.LASF26:
 900 007c 50574D5F 		.ascii	"PWM_swt_mode_select_Init\000"
 900      7377745F 
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 33


 900      6D6F6465 
 900      5F73656C 
 900      6563745F 
 901              	.LASF11:
 902 0095 666C6F61 		.ascii	"float\000"
 902      7400
 903              	.LASF22:
 904 009b 636F756E 		.ascii	"counter\000"
 904      74657200 
 905              	.LASF1:
 906 00a3 756E7369 		.ascii	"unsigned char\000"
 906      676E6564 
 906      20636861 
 906      7200
 907              	.LASF32:
 908 00b1 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 908      43313120 
 908      352E342E 
 908      31203230 
 908      31363036 
 909 00e4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 909      20726576 
 909      6973696F 
 909      6E203233 
 909      37373135 
 910 0117 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 910      66756E63 
 910      74696F6E 
 910      2D736563 
 910      74696F6E 
 911              	.LASF14:
 912 013f 72656738 		.ascii	"reg8\000"
 912      00
 913              	.LASF5:
 914 0144 6C6F6E67 		.ascii	"long unsigned int\000"
 914      20756E73 
 914      69676E65 
 914      6420696E 
 914      7400
 915              	.LASF9:
 916 0156 75696E74 		.ascii	"uint8\000"
 916      3800
 917              	.LASF34:
 918 015c 433A5C55 		.ascii	"C:\\Users\\eylonk\\university_project\\university_p"
 918      73657273 
 918      5C65796C 
 918      6F6E6B5C 
 918      756E6976 
 919 018b 726F6A65 		.ascii	"roject\\main\\Workspace01\\eylons_project.cydsn\000"
 919      63745C6D 
 919      61696E5C 
 919      576F726B 
 919      73706163 
 920              	.LASF20:
 921 01b8 50574D5F 		.ascii	"PWM_swt_mode_select_WriteCounter\000"
 921      7377745F 
 921      6D6F6465 
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 34


 921      5F73656C 
 921      6563745F 
 922              	.LASF12:
 923 01d9 646F7562 		.ascii	"double\000"
 923      6C6500
 924              	.LASF31:
 925 01e0 50574D5F 		.ascii	"PWM_swt_mode_select_ReadPeriod\000"
 925      7377745F 
 925      6D6F6465 
 925      5F73656C 
 925      6563745F 
 926              	.LASF30:
 927 01ff 50574D5F 		.ascii	"PWM_swt_mode_select_ReadCompare\000"
 927      7377745F 
 927      6D6F6465 
 927      5F73656C 
 927      6563745F 
 928              	.LASF10:
 929 021f 75696E74 		.ascii	"uint16\000"
 929      313600
 930              	.LASF27:
 931 0226 50574D5F 		.ascii	"PWM_swt_mode_select_Start\000"
 931      7377745F 
 931      6D6F6465 
 931      5F73656C 
 931      6563745F 
 932              	.LASF8:
 933 0240 756E7369 		.ascii	"unsigned int\000"
 933      676E6564 
 933      20696E74 
 933      00
 934              	.LASF7:
 935 024d 6C6F6E67 		.ascii	"long long unsigned int\000"
 935      206C6F6E 
 935      6720756E 
 935      7369676E 
 935      65642069 
 936              	.LASF29:
 937 0264 50574D5F 		.ascii	"PWM_swt_mode_select_ReadCapture\000"
 937      7377745F 
 937      6D6F6465 
 937      5F73656C 
 937      6563745F 
 938              	.LASF35:
 939 0284 50574D5F 		.ascii	"PWM_swt_mode_select_initVar\000"
 939      7377745F 
 939      6D6F6465 
 939      5F73656C 
 939      6563745F 
 940              	.LASF17:
 941 02a0 73697A65 		.ascii	"sizetype\000"
 941      74797065 
 941      00
 942              	.LASF6:
 943 02a9 6C6F6E67 		.ascii	"long long int\000"
 943      206C6F6E 
 943      6720696E 
ARM GAS  C:\Users\eylonk\AppData\Local\Temp\ccGWi6F0.s 			page 35


 943      7400
 944              	.LASF13:
 945 02b7 63686172 		.ascii	"char\000"
 945      00
 946              	.LASF33:
 947 02bc 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM_swt_mode_select.c\000"
 947      72617465 
 947      645F536F 
 947      75726365 
 947      5C50536F 
 948              	.LASF2:
 949 02e9 73686F72 		.ascii	"short int\000"
 949      7420696E 
 949      7400
 950              	.LASF28:
 951 02f3 50574D5F 		.ascii	"PWM_swt_mode_select_ReadCounter\000"
 951      7377745F 
 951      6D6F6465 
 951      5F73656C 
 951      6563745F 
 952              	.LASF19:
 953 0313 50574D5F 		.ascii	"PWM_swt_mode_select_Stop\000"
 953      7377745F 
 953      6D6F6465 
 953      5F73656C 
 953      6563745F 
 954              	.LASF4:
 955 032c 6C6F6E67 		.ascii	"long int\000"
 955      20696E74 
 955      00
 956              	.LASF16:
 957 0335 6C6F6E67 		.ascii	"long double\000"
 957      20646F75 
 957      626C6500 
 958              	.LASF0:
 959 0341 7369676E 		.ascii	"signed char\000"
 959      65642063 
 959      68617200 
 960              	.LASF25:
 961 034d 636F6D70 		.ascii	"compare\000"
 961      61726500 
 962              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
